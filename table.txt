一、
CREATE TABLE Patient (
    PatientID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Gender ENUM('Male', 'Female', 'Other') NOT NULL,
    DateOfBirth DATE NOT NULL,
    ContactInfo VARCHAR(255),
    Address VARCHAR(255)
);
说明
PatientID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
Name: 使用 VARCHAR(100)，假设姓名的最大长度为 100 个字符。
Gender: 使用 ENUM 类型，限制性别为 'Male', 'Female', 或 'Other'。
DateOfBirth: 使用 DATE 类型来存储出生日期。
ContactInfo: 使用 VARCHAR(255)，假设联系方式的最大长度为 255 个字符。
Address: 使用 VARCHAR(255)，假设地址的最大长度为 255 个字符。

二、
CREATE TABLE Doctor (
    DoctorID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Specialty VARCHAR(100),
    ContactInfo VARCHAR(255),
    Department VARCHAR(100)
);
说明
DoctorID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
Name: 使用 VARCHAR(100)，假设姓名的最大长度为 100 个字符。
Specialty: 使用 VARCHAR(100)，假设专业领域的最大长度为 100 个字符。
ContactInfo: 使用 VARCHAR(255)，假设联系方式的最大长度为 255 个字符。
Department: 使用 VARCHAR(100)，假设所属科室的最大长度为 100 个字符。

三、
CREATE TABLE Hospital (
    HospitalID INT AUTO_INCREMENT PRIMARY KEY,
    HospitalName VARCHAR(255) NOT NULL,
    Address VARCHAR(255),
    ContactInfo VARCHAR(255)
);
说明
HospitalID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
HospitalName: 使用 VARCHAR(255)，假设医院名称的最大长度为 255 个字符。
Address: 使用 VARCHAR(255)，假设地址的最大长度为 255 个字符。
ContactInfo: 使用 VARCHAR(255)，假设联系方式的最大长度为 255 个字符。

四、
CREATE TABLE Department (
    DepartmentID INT AUTO_INCREMENT PRIMARY KEY,
    DepartmentName VARCHAR(255) NOT NULL,
    HospitalID INT,
    FOREIGN KEY (HospitalID) REFERENCES Hospital(HospitalID)
);
说明
DepartmentID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
DepartmentName: 使用 VARCHAR(255)，假设科室名称的最大长度为 255 个字符。
HospitalID: 使用 INT 类型，并定义为外键，引用 Hospital 表中的 HospitalID 字段。
确保在创建 Department 表之前，Hospital 表已经存在，以便外键引用能够正确建立。

五、
CREATE TABLE MedicalRecord (
    RecordID INT AUTO_INCREMENT PRIMARY KEY,
    PatientID INT,
    DoctorID INT,
    DiagnosisDate DATE NOT NULL,
    DiagnosisResult LONGBLOB,
    Prescription LONGBLOB,
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID),
    FOREIGN KEY (DoctorID) REFERENCES Doctor(DoctorID)
);
说明
RecordID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
PatientID: 使用 INT 类型，并定义为外键，引用 Patient 表中的 PatientID 字段。
DoctorID: 使用 INT 类型，并定义为外键，引用 Doctor 表中的 DoctorID 字段。
DiagnosisDate: 使用 DATE 类型来存储诊断日期。
DiagnosisResult: 使用 LONGBLOB 类型来存储诊断结果的 PDF 文件。
Prescription: 使用 LONGBLOB 类型来存储处方的 PDF 文件。
确保在创建 MedicalRecord 表之前，Patient 和 Doctor 表已经存在，以便外键引用能够正确建立。

六、
CREATE TABLE MedicalImage (
    ImageID INT AUTO_INCREMENT PRIMARY KEY,
    RecordID INT,
    ImageType VARCHAR(50),
    StoragePath VARCHAR(255),
    UploadDate DATE,
    CTImage LONGBLOB,
    MRIImage LONGBLOB,
    UltrasoundImage LONGBLOB,
    FOREIGN KEY (RecordID) REFERENCES MedicalRecord(RecordID)
);
说明
ImageID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
RecordID: 使用 INT 类型，并定义为外键，引用 MedicalRecord 表中的 RecordID 字段。
ImageType: 使用 VARCHAR(50)，假设影像类型的最大长度为 50 个字符。
StoragePath: 使用 VARCHAR(255)，假设存储路径的最大长度为 255 个字符。
UploadDate: 使用 DATE 类型来存储上传日期。
CTImage: 使用 LONGBLOB 类型来存储 CT 扫描图像的 JPG 文件。
MRIImage: 使用 LONGBLOB 类型来存储 MRI 影像的 BMP 文件。
UltrasoundImage: 使用 LONGBLOB 类型来存储超声波图像的 PNG 文件。
确保在创建 MedicalImage 表之前，MedicalRecord 表已经存在，以便外键引用能够正确建立。

七、
CREATE TABLE GenomicData (
    GeneID INT AUTO_INCREMENT PRIMARY KEY,
    PatientID INT,
    GeneSequence LONGBLOB,
    AnalysisResult LONGBLOB,
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)
);
说明
GeneID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
PatientID: 使用 INT 类型，并定义为外键，引用 Patient 表中的 PatientID 字段。
GeneSequence: 使用 LONGBLOB 类型来存储基因序列的 FASTA 文件。
AnalysisResult: 使用 LONGBLOB 类型来存储分析结果的 PDF 文件。
确保在创建 GenomicData 表之前，Patient 表已经存在，以便外键引用能够正确建立。

八、
CREATE TABLE DeviceData (
    DataID INT AUTO_INCREMENT PRIMARY KEY,
    PatientID INT,
    DeviceType VARCHAR(100),
    DataContent LONGBLOB,
    RecordDate DATE,
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)
);
说明
DataID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
PatientID: 使用 INT 类型，并定义为外键，引用 Patient 表中的 PatientID 字段。
DeviceType: 使用 VARCHAR(100)，假设设备类型的最大长度为 100 个字符。
DataContent: 使用 LONGBLOB 类型来存储数据内容的 PDF 文件。
RecordDate: 使用 DATE 类型来存储记录日期。
确保在创建 DeviceData 表之前，Patient 表已经存在，以便外键引用能够正确建立。

九、
CREATE TABLE AudioRecord (
    RecordID INT AUTO_INCREMENT PRIMARY KEY,
    CounselingAudio LONGBLOB,
    PostOpCareAudio LONGBLOB,
    ConditionChangeAudio LONGBLOB
);
说明
RecordID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
CounselingAudio: 使用 LONGBLOB 类型来存储心理咨询录音的 MP3 文件。
PostOpCareAudio: 使用 LONGBLOB 类型来存储术后护理录音的 MP3 文件。
ConditionChangeAudio: 使用 LONGBLOB 类型来存储病情变化通知录音的 MP3 文件。
注意事项
LONGBLOB: 适用于存储较大的二进制数据，如音频文件。确保 MySQL 的 max_allowed_packet 设置足够大，以支持存储这些文件。
文件存储: 确保在插入数据时，音频文件的路径和权限正确，以便 MySQL 能够访问和存储这些文件。

十、
CREATE TABLE Document (
    DocumentID INT AUTO_INCREMENT PRIMARY KEY,
    AdmissionRecord LONGBLOB,
    DischargeSummary LONGBLOB,
    TreatmentPlan LONGBLOB
);
说明
DocumentID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
AdmissionRecord: 使用 LONGBLOB 类型来存储住院记录的 PDF 文件。
DischargeSummary: 使用 LONGBLOB 类型来存储出院总结报告的 PDF 文件。
TreatmentPlan: 使用 LONGBLOB 类型来存储诊疗方案文件的 PDF 文件。
注意事项
LONGBLOB: 适用于存储较大的二进制数据，如 PDF 文件。确保 MySQL 的 max_allowed_packet 设置足够大，以支持存储这些文件。
文件存储: 确保在插入数据时，PDF 文件的路径和权限正确，以便 MySQL 能够访问和存储这些文件。

十一、
CREATE TABLE StandardVideo (
    VideoID INT AUTO_INCREMENT PRIMARY KEY,
    SurgicalProcedureVideo LONGBLOB,
    NursingStandardVideo LONGBLOB,
    EmergencyProcedureVideo LONGBLOB
);
说明
VideoID: 使用 INT 类型，并设置为 AUTO_INCREMENT，以便自动生成唯一的 ID。它被定义为 PRIMARY KEY。
SurgicalProcedureVideo: 使用 LONGBLOB 类型来存储手术流程视频的 MP4 文件。
NursingStandardVideo: 使用 LONGBLOB 类型来存储护理操作标准视频的 MP4 文件。
EmergencyProcedureVideo: 使用 LONGBLOB 类型来存储应急处理标准视频的 MP4 文件.
注意事项
LONGBLOB: 适用于存储较大的二进制数据，如视频文件。确保 MySQL 的 max_allowed_packet 设置足够大，以支持存储这些文件。
文件存储: 确保在插入数据时，视频文件的路径和权限正确，以便 MySQL 能够访问和存储这些文件。